<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/quiz.css" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <title>random quiz</title>

    <div class="home-box custom-box">
      <h1>instruction</h1>
      <p>total number of questions:<span class="total-question"></span></p>
      <button type="button" class="btn" onclick="startQuiz()">start</button>
    </div>

    <div class="quiz-box custom-box hide">
      <header>
        <div class="title"><%= title %></div>

        <div class="timer">
          <div class="time_left_txt">Time Left</div>
          <div class="timer_sec">15</div>
        </div>

        <div class="time_line"></div>
      </header>
      <div class="question-number"></div>
      <div class="question-text"></div>

      <div class="option-container"></div>

      <div class="next-question-btn">
        <button type="button" class="btn" onclick="next()">next</button>
      </div>
      <div class="answers-indicator"></div>
    </div>

    <div class="result-box custom-box hide">
      <h1>quiz reults</h1>
      <form method="post" id="form">
        <input hidden type="text" id="score" name="score" />
        <input hidden type="text" id="quizid" name="quiz_id" />
        <input hidden type="text" id="numberofquestion" name="questionLimit" />
        <input hidden type="text" id="percentage" name="percentage" />
        <input
          hidden
          type="text"
          id="quizname"
          name="section"
          value="<%= section %> "
        />
        <input
          hidden
          type="text"
          id="quizname"
          name="level"
          value="<%= level %> "
        />
      </form>
      <table>
        <tr>
          <td>total questions</td>
          <td><span class="total-question"> </span></td>
        </tr>
        <tr>
          <td>attempt</td>
          <td><span class="total-attempt"> </span></td>
        </tr>
        <tr>
          <td>correct</td>
          <td><span class="total-correct"> </span></td>
        </tr>
        <tr>
          <td>wrong</td>
          <td><span class="total-wrong"> </span></td>
        </tr>
        <tr>
          <td>percentage</td>
          <td><span class="percentage"> </span></td>
        </tr>
        <tr>
          <td>your total score</td>
          <td>
            <span class="total-score"> </span>
          </td>
        </tr>
      </table>
      <button type="button" class="btn" onclick="tryAgainQuiz()">
        try again
      </button>
      <!-- <button type="button" class="btn" onclick="goToHome()">go to home</button> -->
      <button type="button" class="btn">
        <a class="btn-home" href="/home"> go to home </a>
      </button>
    </div>

    <!-- app.js -->
    <script>
      let quiz;
      // for generating x number of questions from the array declare a const varaible and asign that x value and replace quiz.length to the varaible name...(questionLimit)
      $.getJSON("<%= filelocation %>", function (data) {
        quiz = data;
        console.log(quiz[0].quiz_id); //json output
      });
      const limit = "<%-questionLimit%>";

      console.log(parseInt(limit));
      const questionNumber = document.querySelector(".question-number");
      const questionText = document.querySelector(".question-text");
      const optionContainer = document.querySelector(".option-container");
      const answersIndicatorContainer =
        document.querySelector(".answers-indicator");
      const homeBox = document.querySelector(".home-box");
      const quizBox = document.querySelector(".quiz-box");
      const resultBox = document.querySelector(".result-box");
      const questionLimit = parseInt(limit); //if u want all question (const questionLimit = quiz.length;)
      let questionCounter = 0;
      let currentQuestion;
      let availableQuestions = [];
      let availableOptions = [];
      let corectAnswers = 0;
      let attempt = 0;

      // push the questions into availableQuestions array
      function setAvailableQuestions() {
        const totalQuestion = quiz.length;
        for (let i = 0; i < totalQuestion; i++) {
          availableQuestions.push(quiz[i]);
        }
      }

      // set question number and question andd options
      function getNewQuestion() {
        console.log(availableQuestions);
        //    set question number
        // questionNumber.innerHTML = "Question" + (questionCounter + 1) + " of " + quiz.length;
        questionNumber.innerHTML =
          "Question" + (questionCounter + 1) + " of " + questionLimit;

        const questionIndex =
          availableQuestions[
            Math.floor(Math.random() * availableQuestions.length)
          ];

        currentQuestion = questionIndex;
        questionText.innerHTML = currentQuestion.q;
        // console.log(questionIndex);
        // get the position of 'questionIndex' from the availableQuestion array;
        const index1 = availableQuestions.indexOf(questionIndex);
        // remove the 'questionIndex' from the availableQuestion Array, so that the question does not repeat
        availableQuestions.splice(index1, 1);
        // show question image if 'img' property exists
        if (currentQuestion.hasOwnProperty("img")) {
          const img = document.createElement("img");
          img.src = currentQuestion.img;
          questionText.appendChild(img);
        }

        // set Options
        // get the length of options
        const optionLen = currentQuestion.options.length;
        // push options to availableoptions array
        for (let i = 0; i < optionLen; i++) {
          availableOptions.push(i);
        }

        optionContainer.innerHTML = "";
        let animationDelay = 0.15;
        // create options in html
        for (let i = 0; i < optionLen; i++) {
          //random option
          const optonIndex =
            availableOptions[
              Math.floor(Math.random() * availableOptions.length)
            ];
          // console.log(optonIndex);
          // get the position from 'optionIndex' from the availableOptions array
          const index2 = availableOptions.indexOf(optonIndex);
          //remove the 'optionIndex' from the availableOptions array, so that the option does not repeat
          availableOptions.splice(index2, 1);
          // console.log(optionIndex);
          // console.log(availableOptions);
          const option = document.createElement("div");
          option.innerHTML = currentQuestion.options[optonIndex];
          option.id = optonIndex;
          option.style.animationDelay = animationDelay + "s";
          animationDelay = animationDelay + 0.15;
          option.className = "option";
          optionContainer.appendChild(option); //error before 5.19 ep 3
          option.setAttribute("onclick", "getResult(this)");
        }
        questionCounter++;
      }
      startQuiz;

      //get the result of current attempt question
      function getResult(element) {
        const id = parseInt(element.id);
        //get the answer by comparring the id of clicked option
        // console.log(typeof id)
        clearInterval(counter); //clear counter
        clearInterval(counterLine); //clear counterLine

        if (id === currentQuestion.answer) {
          // console.log("annswer is correct")
          //set the green color to the correct option
          element.classList.add("correct");
          //add the indicator to correct
          updateAnswerIndicator("correct");
          corectAnswers++;
          // console.log("correct:"+corectAnswers);
        } else {
          //set the red color to the incorrect option
          // console.log("answer is wrong");
          element.classList.add("wrong");
          //add the indicator to wrong
          updateAnswerIndicator("wrong");
          //if the answer is incorrect  then show the correct option by adding green color to the correct option
          const optionLen = optionContainer.children.length;
          for (let i = 0; i < optionLen; i++) {
            if (
              parseInt(optionContainer.children[i].id) ===
              currentQuestion.answer
            ) {
              optionContainer.children[i].classList.add("correct");
            }
          }
        }
        attempt++;
        unclickableOptions();
      }

      //make all the options unclickable once the user selects one option
      function unclickableOptions() {
        const optionLen = optionContainer.children.length;
        for (let i = 0; i < optionLen; i++) {
          optionContainer.children[i].classList.add("already-answered");
        }
      }

      // this function is not working //
      function AnswersIndicator() {
        answersIndicatorContainer.innerHTML = "";
        // const totalQuestion = quiz.length;
        const totalQuestion = questionLimit;
        for (let i = 0; i < totalQuestion; i++) {
          const indicator = document.createElement("div");
          answersIndicatorContainer.appendChild(indicator);
        }
      }
      //------------------------------//

      function updateAnswerIndicator(markType) {
        answersIndicatorContainer.children[questionCounter - 1].classList.add(
          markType
        );
      }

      function next() {
        clearInterval(counter); //clear counter
        clearInterval(counterLine); //clear counterLine
        startTimer(15); //calling startTimer function
        startTimerLine(widthValue); //calling startTimerLine function
        timeText.textContent = "Time Left"; //change the timeText to Time Left
        // if(questionCounter === quiz.length){
        if (questionCounter === questionLimit) {
          // console.log("quiz over"
          quizOver();
        } else {
          getNewQuestion();
        }
      }

      function quizOver() {
        //  hide quiz quizbox
        quizBox.classList.add("hide");
        // show result Box
        resultBox.classList.remove("hide");
        quizResult();
      }
      // get the quiz result
      function quizResult() {
        // resultBox.querySelector(".total-question").innerHTML = quiz.length;
        resultBox.querySelector(".total-question").innerHTML = questionLimit;
        resultBox.querySelector(".total-attempt").innerHTML = attempt;
        resultBox.querySelector(".total-correct").innerHTML = corectAnswers;
        resultBox.querySelector(".total-wrong").innerHTML =
          attempt - corectAnswers;
        // const percentage= (corectAnswers/quiz.length)*100;
        const percentage = (corectAnswers / questionLimit) * 100;
        resultBox.querySelector(".percentage").innerHTML =
          percentage.toFixed(2) + "%";
        resultBox.querySelector(".total-score").innerHTML =
          corectAnswers + "/" + questionLimit;

        let score = document.getElementById("score");
        score.value = corectAnswers;

        let quiz_id = document.getElementById("quizid");
        quiz_id.value = quiz[0].quiz_id;

        let numberofquestion = document.getElementById("numberofquestion");
        numberofquestion.value = questionLimit;

        let percentages = document.getElementById("percentage");
        percentages.value = percentage.toFixed(2);

        event.preventDefault();

        $.ajax({
          type: "POST",
          url: "/result",
          data: $("#form").serialize(),
          dataType: "json",
          success: function (response) {
            //alert("a");
            console.log(response.Success);

            // document.getElementById("check").innerHTML = response.Success;
            // //ADD THIS CODE
            // setTimeout(function () {
            //   document.getElementById("check").innerHTML = "";
            // }, 3000);
            // if (response.Success == "Success!") {
            //   document
            //     .getElementById("aa")
            //     .setAttribute("href", response.quiz_id);
            //   document.getElementById("aa").click();
            // }
          },
          error: function (e) {
            console.log(e);
          },
        });
        // resultBox.querySelector(".total-score").innerHTML = corectAnswers+ "/" +quiz.length;
      }

      function resetQuiz() {
        questionCounter = 0;
        corectAnswers = 0;
        attempt = 0;
        availableQuestions = [];

        timeValue = 15;
        // que_count = 0;
        // que_numb = 1;
        // userScore = 0;
        widthValue = 0;
        clearInterval(counter); //clear counter
        clearInterval(counterLine); //clear counterLine
        // startTimer(timeValue); //calling startTimer function
        // startTimerLine(widthValue); //calling startTimerLine function
        timeText.textContent = "Time Left"; //change the text of timeText to Time Left
      }

      function tryAgainQuiz() {
        // hide the result box
        resultBox.classList.add("hide");
        // show the quiz box
        quizBox.classList.remove("hide");
        resetQuiz();
        startQuiz();
      }

      /*----this part will be not be neccessary-----
    function goToHome() {
      // hide the result box
      resultBox.classList.add("hide");
      // show the quiz box
      homeBox.classList.remove("hide");
      resetQuiz();
    }
    ---------------------------------------------*/

      // #### starting point #####

      // window.onload = function(){
      function startQuiz() {
        //hide home box
        homeBox.classList.add("hide");
        // unhide quix box
        quizBox.classList.remove("hide");
        // first we will set all questions in availableQuestions array

        setAvailableQuestions();
        // second we will call getNewQuestion(); funtion
        getNewQuestion();
        //to create indicator of answers
        AnswersIndicator();

        startTimer(15); //calling startTimer function
        startTimerLine(0); //calling startTimerLine function
        timeText.textContent = "Time Left"; //change the text of timeText to Time Left
      }

      // const questions=10;
      window.onload = function () {
        // homeBox.querySelector(".total-question").innerHTML = questions;
        homeBox.querySelector(".total-question").innerHTML = questionLimit;
      };

      // timer
      const time_line = document.querySelector("header .time_line");
      const timeText = document.querySelector(".timer .time_left_txt");
      const timeCount = document.querySelector(".timer .timer_sec");

      let timeValue = 15;
      let counter;
      let counterLine;
      let widthValue = 0;

      function startTimer(time) {
        counter = setInterval(timer, 1000);
        function timer() {
          timeCount.textContent = time; //changing the value of timeCount with time value
          time--; //decrement the time value
          if (time < 9) {
            //if timer is less than 9
            let addZero = timeCount.textContent;
            timeCount.textContent = "0" + addZero; //add a 0 before time value
          }
          if (time < 0) {
            //if timer is less than 0
            clearInterval(counter); //clear counter
            timeText.textContent = "Time Off"; //change the time text to time off
            const optionLen = optionContainer.children.length;
          }

          if (time == 0) {
            // option.setAttribute("getResult(this)");
            // // set the red color to the incorrect option
            // // console.log("answer is wrong");
            // element.classList.add("wrong");
            // //add the indicator to wrong
            updateAnswerIndicator("wrong");
            attempt++;
            unclickableOptions();
            const optionLen = optionContainer.children.length;
            for (let i = 0; i < optionLen; i++) {
              if (
                parseInt(optionContainer.children[i].id) ===
                currentQuestion.answer
              ) {
                optionContainer.children[i].classList.add("correct");
              }
            }
          }
        }
      }

      // // make all the options unclickable once the user selects one option
      // function unclickableOptis() {
      //   const optionLen = optionContainer.children.length;
      //   for (let i = 0; i < optionLen; i++) {
      //     optionContainer.children[i].classList.add("already-answered");
      //   }
      // }

      function startTimerLine(time) {
        counterLine = setInterval(timer, 29);
        function timer() {
          time += 1; //upgrading time value with 1
          time_line.style.width = time + "px"; //increasing width of time_line with px by time value
          if (time > 549) {
            //if time value is greater than 549
            clearInterval(counterLine); //clear counterLine
          }
        }
      }

      function queCounter(index) {
        //creating a new span tag and passing the question number and total question
        let totalQueCounTag =
          "<span><p>" +
          index +
          "</p> of <p>" +
          questions.length +
          "</p> Questions</span>";
        bottom_ques_counter.innerHTML = totalQueCounTag; //adding new span tag inside bottom_ques_counter
      }
    </script>
    <%- include('../views/include/footer.ejs')%>
  </head>
</html>
